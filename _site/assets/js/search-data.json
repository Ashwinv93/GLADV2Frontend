{
  
    
        "post0": {
            "title": "Collection",
            "content": ". .",
            "url": "http://localhost:4100/GLADV2Frontend/Collection",
            "relUrl": "/Collection",
            "date": " • Feb 14, 2024"
        }
        
    
  
    
        ,"post1": {
            "title": "Users Database",
            "content": "Name ID Age .",
            "url": "http://localhost:4100/GLADV2Frontend/database",
            "relUrl": "/database",
            "date": " • Feb 14, 2024"
        }
        
    
  
    
        ,"post2": {
            "title": "N@TM Plans",
            "content": "Ashwin Plans . I would like to add a reset button that will clear the contairer for the cards, and bring back the chest, allowing the user to open it again. | I also would like to add two different chests. One would be the golden chest, which only allows epics and lower to be pulled. Only 4 cards. The other chest would be a lightnight chest which give 10 cards all epic and above. Depending on what the user clicks on different functions will run to populate the container. | If I have time I will add a collection system so people can save their favorite cards. | . Licoln Plans . I want to be able to improve my quiz by making a cards.py in the model for the backend, a card.py in the Api in the backend. I want to do this because after the deck recommendation is given, it will give statistics on all the cards by getting it from the backend. | . Dantes Plans . For my code, I need to work on integrating the backend for storing the decks you create allowing the user to return to the decks they created. Also, I could add a way to favorite the specific decks and delete others. Also, I could connect lincolns feature to mine by automatically making the deck that the survey gives into the deck collection. | . Gurshawns plans . i want to fix my nba database by showing all player data in a table, and when you search a table will be generated based on the stats currently shown. the user will have the option to add players to a team and reset the team | .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/02/12/Plans-For-N@TM_IPYNB_2_.html",
            "relUrl": "/2024/02/12/Plans-For-N@TM_IPYNB_2_.html",
            "date": " • Feb 12, 2024"
        }
        
    
  
    
        ,"post3": {
            "title": "Clash Royale Quiz",
            "content": "Clash Royale Player Quiz . Start the Quiz! .",
            "url": "http://localhost:4100/GLADV2Frontend/cards",
            "relUrl": "/cards",
            "date": " • Feb 12, 2024"
        }
        
    
  
    
        ,"post4": {
            "title": "Test",
            "content": "Clash Royale Card Display and Flip . Sort by Elixir Low to High Sort by Elixir High to Low Sort by Rarity Low to High Sort by Rarity High to Low Deck (Average Elixir: 0) Save Deck Saved Decks . .",
            "url": "http://localhost:4100/GLADV2Frontend/test",
            "relUrl": "/test",
            "date": " • Feb 12, 2024"
        }
        
    
  
    
        ,"post5": {
            "title": "Deck builder",
            "content": "Deck Builder . Sort by Elixir Low to High Sort by Elixir High to Low Sort by Rarity Low to High Sort by Rarity High to Low Deck (Average Elixir: 0) Save Deck Saved Decks . .",
            "url": "http://localhost:4100/GLADV2Frontend/cards",
            "relUrl": "/cards",
            "date": " • Feb 10, 2024"
        }
        
    
  
    
        ,"post6": {
            "title": "user page",
            "content": "Our Features .",
            "url": "http://localhost:4100/GLADV2Frontend/userpage",
            "relUrl": "/userpage",
            "date": " • Feb 4, 2024"
        }
        
    
  
    
        ,"post7": {
            "title": "Edit User",
            "content": "Name: . User ID: . Date of Birth: . Role: . Submit .",
            "url": "http://localhost:4100/GLADV2Frontend/edituser",
            "relUrl": "/edituser",
            "date": " • Feb 4, 2024"
        }
        
    
  
    
        ,"post8": {
            "title": "admin page",
            "content": "Admin Page .",
            "url": "http://localhost:4100/GLADV2Frontend/adminpage",
            "relUrl": "/adminpage",
            "date": " • Feb 3, 2024"
        }
        
    
  
    
        ,"post9": {
            "title": "Notes",
            "content": "Mister Mort said that we should change the backend code in order to alterate the appearance of the running backend flash server. We MUST DO THIS gershawn said he would do it but i do not trust him so we as a group must do it/ .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/02/02/Notes.html",
            "relUrl": "/2024/02/02/Notes.html",
            "date": " • Feb 2, 2024"
        }
        
    
  
    
        ,"post10": {
            "title": "JWT Roles",
            "content": "JWT Roles Team Teach . Gershawn, Lincoln, Ashwin, Dante, Vance. . Lesson Overview . JWT Roles: JWT (JSON Web Token) roles are used to define the permissions and access levels of a user or system within an application. These roles are typically encoded within the JWT payload. . Cookies With JWT Roles: Cookies and JWT roles work together by storing the JWT securely within an HTTP cookie. When a user logs in, the server generates a JWT with the assigned roles, and this token is then stored as a cookie on the client-side. . Authentication: A process of verifying that an entity is who they claim to be. . . Format: The header contains information about the type and signing algorithm, the payload holds claims like user details or permissions, and the signature is a cryptographic hash of the header, payload, and a secret key. . Single Vs. Multi-factor Auth: . Single-factor authentication is used when a user provides a username/email/phone number and a password. This is the most common and weakest authentication factor. The user simply inputs the email and password, and the system checks if the data is valid; if valid, the user gets authenticated and can access the resource. . Mulit-factor authentication uses more than one factor to authenticate a user. For example, the user tries to log in with an email and password; if the data is correct, a code is sent to the user’s account registered phone number. If the user enters the code, the user will be logged in; otherwise, the user is not authenticated. . Types of Authentication: . Knowledge Authentication: The user is asked something that only they can provide or know – e.g., password. This is the most common type and also the easiest. . Property Authentication: The user is asked for something they own or possess. For example, they can use a hardware authentication device like YubiKey or an authenticator app on their phone. The idea is that users will be asked to set an authentication factor that verifies the identity more securely. This isn’t always used alone; it’s used alongside another authentication type, say, Knowledge authentication. . Biological Authentication: The user is asked to verify their identity using something biologically unique to them – e.g., a fingerprint or iris scan. . Authentication vs. Authorization . Authentication verifies identity, usually through credential validation and makes sure the user is who they say they are while authorization grants or denies permissions and verifies a user has the correct credentials to execute tasks. . Rescourses and Info . A private _role attribute, stored in the database, to track the user’s role, with a default role of “User”. | A constructor init to initialize a new User instance with attributes like name, uid, password, dob (date of birth), and role. | A property role, with a getter and setter, providing controlled access to the _role attribute. | A method is_admin to check if the user’s role is “Admin”. | A method read to convert the user’s data into a dictionary, useful for operations like sending user data in a response. | . class User(db.Model): # ... (existing code) _role = db.Column(db.String(20), default=&quot;User&quot;, nullable=False) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=date.today(), role=&quot;User&quot;): # ... (existing code) self._role = role @property def role(self): return self._role @role.setter def role(self, role): self._role = role def is_admin(self): return self._role == &quot;Admin&quot; # ... (existing code) # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, &quot;role&quot;: self.role, &quot;posts&quot;: [post.read() for post in self.posts] } . The initUsers function in a Flask application initializes the database and creates a test user. It uses the Flask app context to access database functionalities, creates the necessary database tables, and then creates a user with specified details, including setting the role to “Admin”. . def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), role=&quot;Admin&quot;)a . The _Security class in the provided code defines a method for user authentication in a Flask-based API. It handles POST requests, extracts user details (UID and password) from the request body, and checks these credentials against the database. If authenticated successfully, it generates a JWT (JSON Web Token) for the user, which includes the user’s UID and role. . class _Security(Resource): def post(self): try: body = request.get_json() if not body: return { &quot;message&quot;: &quot;Please provide user details&quot;, &quot;data&quot;: None, &quot;error&quot;: &quot;Bad request&quot; }, 400 &#39;&#39;&#39; Get Data &#39;&#39;&#39; uid = body.get(&#39;uid&#39;) if uid is None: return {&#39;message&#39;: f&#39;User ID is missing&#39;}, 400 password = body.get(&#39;password&#39;) &#39;&#39;&#39; Find user &#39;&#39;&#39; user = User.query.filter_by(_uid=uid).first() if user is None or not user.is_password(password): return {&#39;message&#39;: f&quot;Invalid user id or password&quot;}, 400 if user: try: token_payload = { &quot;_uid&quot;: user._uid, &quot;role&quot;: user.role # Add the role information to the token } token = jwt.encode( token_payload, current_app.config[&quot;SECRET_KEY&quot;], algorithm=&quot;HS256&quot; ) . Function token_required: A decorator for role-based access control in a Flask app. | Parameters: Optional roles parameter to restrict access to specific user roles. | Token Retrieval: Extracts JWT from request cookies. | No Token: Returns 401 Unauthorized if token is missing. | Token Decoding: Decodes the JWT using the app’s secret key. | User Validation: Fetches user from the database using UID from the token. | Invalid Token/User: Returns 401 Unauthorized for invalid or non-existent users. | Role Check: Verifies if the user’s role matches the required roles, returns 403 Forbidden if not. | Error Handling: Catches exceptions, returning a 500 Internal Server Error with error details. | Function Execution: Proceeds to execute the wrapped function if authentication and authorization succeed. | . from functools import wraps import jwt from flask import request, abort from flask import current_app from model.users import User def token_required(roles=None): def decorator(f): @wraps(f) def decorated(*args, **kwargs): token = request.cookies.get(&quot;jwt&quot;) if not token: return { &quot;message&quot;: &quot;Authentication Token is missing!&quot;, &quot;data&quot;: None, &quot;error&quot;: &quot;Unauthorized&quot; }, 401 try: data = jwt.decode(token, current_app.config[&quot;SECRET_KEY&quot;], algorithms=[&quot;HS256&quot;]) current_user = User.query.filter_by(_uid=data[&quot;_uid&quot;]).first() if current_user is None: return { &quot;message&quot;: &quot;Invalid Authentication token!&quot;, &quot;data&quot;: None, &quot;error&quot;: &quot;Unauthorized&quot; }, 401 # Check if roles are provided and user has the required role if roles and current_user.role not in roles: return { &quot;message&quot;: &quot;Insufficient permissions. Required roles: {}&quot;.format(roles), &quot;data&quot;: None, &quot;error&quot;: &quot;Forbidden&quot; }, 403 except Exception as e: return { &quot;message&quot;: &quot;Something went wrong&quot;, &quot;data&quot;: None, &quot;error&quot;: str(e) }, 500 return f(current_user, *args, **kwargs) return decorated return decorator . . Implementation . How we used this in our code. . Users.py . import os import base64 import json from datetime import date from random import randrange from flask import Flask, current_app from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from sqlalchemy.exc import IntegrityError from __init__ import app, db # Initialize Flask App app = Flask(__name__) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///mydatabase.db&#39; # SQLite database app.config[&#39;SECRET_KEY&#39;] = &#39;09f26e402586e2faa8da4c98a35f1b20d6b033c60&#39; # Random secret key app.config[&#39;UPLOAD_FOLDER&#39;] = &#39;./uploads&#39; # Upload folder for images db = SQLAlchemy(app) class Post(db.Model): __tablename__ = &#39;posts&#39; id = db.Column(db.Integer, primary_key=True) note = db.Column(db.Text, nullable=False) image = db.Column(db.String, nullable=True) userID = db.Column(db.Integer, db.ForeignKey(&#39;users.id&#39;)) def __init__(self, user_id, note, image=None): self.userID = user_id self.note = note self.image = image def __repr__(self): return f&quot;&lt;Post {self.id}&gt;&quot; def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.rollback() return None def read(self): upload_folder = app.config[&#39;UPLOAD_FOLDER&#39;] image_path = os.path.join(upload_folder, self.image) if self.image else None image_data = None if image_path and os.path.isfile(image_path): with open(image_path, &#39;rb&#39;) as file: image_data = base64.b64encode(file.read()).decode(&#39;utf-8&#39;) return { &quot;id&quot;: self.id, &quot;userID&quot;: self.userID, &quot;note&quot;: self.note, &quot;image&quot;: self.image, &quot;base64&quot;: image_data } class User(db.Model): __tablename__ = &#39;users&#39; id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), nullable=False) _dob = db.Column(db.Date, nullable=True) _role = db.Column(db.String(20), default=&quot;User&quot;, nullable=False) posts = db.relationship(&#39;Post&#39;, backref=&#39;user&#39;, lazy=True) def __init__(self, name, uid, password, dob=None, role=&quot;User&quot;): self._name = name self._uid = uid self._password = generate_password_hash(password) self._dob = dob self._role = role def set_password(self, password): self._password = generate_password_hash(password) def check_password(self, password): return check_password_hash(self._password, password) def as_dict(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self._name, &quot;uid&quot;: self._uid, &quot;dob&quot;: self._dob.isoformat() if self._dob else None, &quot;role&quot;: self._role } @property def role(self): return self._role def is_admin(self): return self._role == &quot;Admin&quot; def init_users(): with app.app_context(): db.create_all() # Sample users initialization users = [ User(name=&#39;Thomas Edison&#39;, uid=&#39;edison&#39;, password=&#39;securepassword123&#39;, dob=date(1847, 2, 11), role=&quot;Admin&quot;), # Add more sample users if needed ] for user in users: db.session.add(user) for i in range(randrange(1, 5)): post = Post(user_id=user.id, note=f&#39;Sample note {i} for {user.name}&#39;) db.session.add(post) try: db.session.commit() except IntegrityError: print(f&#39;Duplicate user or other database error for user: {user._uid}&#39;) db.session.rollback() if __name__ == &#39;__main__&#39;: init_users() . User.py . import json import jwt from datetime import datetime from flask import Flask, Blueprint, request, jsonify, current_app, Response from flask_sqlalchemy import SQLAlchemy from flask_restful import Api, Resource from werkzeug.security import generate_password_hash, check_password_hash from sqlalchemy.exc import IntegrityError import os # Initialize Flask App app = Flask(__name__) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///mydatabase.db&#39; app.config[&#39;SECRET_KEY&#39;] = &#39;09f26e402586e2faa8da4c98a35f1b20d6b033c60&#39; db = SQLAlchemy(app) # User model class User(db.Model): __tablename__ = &#39;users&#39; id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) _role = db.Column(db.String(20), default=&quot;User&quot;, nullable=False) def __init__(self, name, uid, password, dob, role=&quot;User&quot;): self._name = name self._uid = uid self._password = generate_password_hash(password) self._dob = dob self._role = role def check_password(self, password): return check_password_hash(self._password, password) def as_dict(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self._name, &quot;uid&quot;: self._uid, &quot;dob&quot;: self._dob.strftime(&quot;%Y-%m-%d&quot;) if self._dob else None, &quot;role&quot;: self._role } # Blueprint for user routes user_api = Blueprint(&#39;user_api&#39;, __name__, url_prefix=&#39;/api/users&#39;) api = Api(user_api) # User CRUD class class _CRUD(Resource): def post(self): body = request.get_json() name = body.get(&#39;name&#39;) uid = body.get(&#39;uid&#39;) password = body.get(&#39;password&#39;) dob = body.get(&#39;dob&#39;, &#39;&#39;) role = body.get(&#39;role&#39;, &#39;User&#39;) if not all([name, uid, password]): return jsonify({&#39;message&#39;: &#39;Missing required fields&#39;}), 400 try: dob_parsed = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() if dob else None user = User(name=name, uid=uid, password=password, dob=dob_parsed, role=role) db.session.add(user) db.session.commit() return jsonify(user.as_dict()), 201 except IntegrityError: db.session.rollback() return jsonify({&#39;message&#39;: &#39;User already exists&#39;}), 409 except Exception as e: return jsonify({&#39;message&#39;: str(e)}), 500 def get(self): users = User.query.all() return jsonify([user.as_dict() for user in users]), 200 # User Security class class _Security(Resource): def post(self): body = request.get_json() uid = body.get(&#39;uid&#39;) password = body.get(&#39;password&#39;) user = User.query.filter_by(_uid=uid).first() if user and user.check_password(password): token = jwt.encode({&quot;_uid&quot;: user._uid}, app.config[&quot;SECRET_KEY&quot;], algorithm=&quot;HS256&quot;) return jsonify({&quot;token&quot;: token}), 200 else: return jsonify({&quot;message&quot;: &quot;Invalid credentials&quot;}), 401 # Add resources to the API api.add_resource(_CRUD, &#39;/&#39;) api.add_resource(_Security, &#39;/authenticate&#39;) # Register Blueprint app.register_blueprint(user_api) # Database initialization @app.before_first_request def initialize_database(): db.create_all() # Run the Flask app if __name__ == &quot;__main__&quot;: app.run(debug=True) . auth_middleware.py . from functools import wraps import jwt from flask import request, current_app from model.users import User def token_required(roles=None): def decorator(f): @wraps(f) def decorated(*args, **kwargs): token = request.cookies.get(&quot;jwt&quot;) if not token: return { &quot;message&quot;: &quot;Authentication Token is missing!&quot;, &quot;data&quot;: None, &quot;error&quot;: &quot;Unauthorized&quot; }, 401 try: data = jwt.decode(token, current_app.config[&quot;SECRET_KEY&quot;], algorithms=[&quot;HS256&quot;]) current_user = User.query.filter_by(_uid=data[&quot;_uid&quot;]).first() if current_user is None: return { &quot;message&quot;: &quot;Invalid Authentication token!&quot;, &quot;data&quot;: None, &quot;error&quot;: &quot;Unauthorized&quot; }, 401 # Check if roles are provided and user has the required role if roles and current_user.role not in roles: return { &quot;message&quot;: &quot;Insufficient permissions. Required roles: {}&quot;.format(roles), &quot;data&quot;: None, &quot;error&quot;: &quot;Forbidden&quot; }, 403 except Exception as e: return { &quot;message&quot;: &quot;Something went wrong&quot;, &quot;data&quot;: None, &quot;error&quot;: str(e) }, 500 return f(current_user, *args, **kwargs) return decorated return decorator .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/31/JWT-Roles_IPYNB_2_.html",
            "relUrl": "/2024/01/31/JWT-Roles_IPYNB_2_.html",
            "date": " • Jan 31, 2024"
        }
        
    
  
    
        ,"post11": {
            "title": "Clash Royale Sign Up",
            "content": ". Name: . User ID: . Password: . Date of Birth: . role (Admin/User): . Submit . Already have an acount? .",
            "url": "http://localhost:4100/GLADV2Frontend/signup",
            "relUrl": "/signup",
            "date": " • Jan 30, 2024"
        }
        
    
  
    
        ,"post12": {
            "title": "Login",
            "content": "Login . . . Login . Create New User .",
            "url": "http://localhost:4100/GLADV2Frontend/login",
            "relUrl": "/login",
            "date": " • Jan 30, 2024"
        }
        
    
  
    
        ,"post13": {
            "title": "Project Plans",
            "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Login and Registration&lt;/title&gt; &lt;style&gt; /* Add your CSS styling here */ body { font-family: Arial, sans-serif; } .form-container { margin: auto; width: 300px; padding: 20px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;form-container&quot;&gt; &lt;h2&gt;Register&lt;/h2&gt; &lt;form id=&quot;registerForm&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;registerUsername&quot; placeholder=&quot;Username&quot; required&gt;&lt;br&gt; &lt;input type=&quot;password&quot; id=&quot;registerPassword&quot; placeholder=&quot;Password&quot; required&gt;&lt;br&gt; &lt;button type=&quot;submit&quot;&gt;Register&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;div class=&quot;form-container&quot;&gt; &lt;h2&gt;Login&lt;/h2&gt; &lt;form id=&quot;loginForm&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;loginUsername&quot; placeholder=&quot;Username&quot; required&gt;&lt;br&gt; &lt;input type=&quot;password&quot; id=&quot;loginPassword&quot; placeholder=&quot;Password&quot; required&gt;&lt;br&gt; &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;script&gt; document.getElementById(&#39;registerForm&#39;).addEventListener(&#39;submit&#39;, function(e) { e.preventDefault(); const username = document.getElementById(&#39;registerUsername&#39;).value; const password = document.getElementById(&#39;registerPassword&#39;).value; fetch(&#39;/register&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify({ username, password }) }) .then(response =&gt; response.json()) .then(data =&gt; alert(data.message)); }); document.getElementById(&#39;loginForm&#39;).addEventListener(&#39;submit&#39;, function(e) { e.preventDefault(); const username = document.getElementById(&#39;loginUsername&#39;).value; const password = document.getElementById(&#39;loginPassword&#39;).value; fetch(&#39;/login&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify({ username, password }) }) .then(response =&gt; response.json()) .then(data =&gt; alert(data.message)); }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/25/Team-Teach_login_IPYNB_2_.html",
            "relUrl": "/2024/01/25/Team-Teach_login_IPYNB_2_.html",
            "date": " • Jan 25, 2024"
        }
        
    
  
    
        ,"post14": {
            "title": "Dragability",
            "content": "",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/24/Dragability_IPYNB_2_.html",
            "relUrl": "/2024/01/24/Dragability_IPYNB_2_.html",
            "date": " • Jan 24, 2024"
        }
        
    
  
    
        ,"post15": {
            "title": "Top Decks",
            "content": "&lt;!DOCTYPE html&gt; . Top Clash Royale Decks . . .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/24/Plans-lesson.html",
            "relUrl": "/2024/01/24/Plans-lesson.html",
            "date": " • Jan 24, 2024"
        }
        
    
  
    
        ,"post16": {
            "title": "Chest Open",
            "content": ". Reset .",
            "url": "http://localhost:4100/GLADV2Frontend/ChestOpen",
            "relUrl": "/ChestOpen",
            "date": " • Jan 23, 2024"
        }
        
    
  
    
        ,"post17": {
            "title": "Clash Data",
            "content": "var cardData = { “items”: [ { “name”: “Knight”, “id”: 26000000, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/jAj1Q5rclXxU9kVImGqSJxa4wEMfEhvwNQ_4jiGUuqg.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/jAj1Q5rclXxU9kVImGqSJxa4wEMfEhvwNQ_4jiGUuqg.png” }, “rarity”: “common” }, { “name”: “Archers”, “id”: 26000001, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/W4Hmp8MTSdXANN8KdblbtHwtsbt0o749BbxNqmJYfA8.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/W4Hmp8MTSdXANN8KdblbtHwtsbt0o749BbxNqmJYfA8.png” }, “rarity”: “common” }, { “name”: “Goblins”, “id”: 26000002, “maxLevel”: 14, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/X_DQUye_OaS3QN6VC9CPw05Fit7wvSm3XegXIXKP–0.png” }, “rarity”: “common” }, { “name”: “Giant”, “id”: 26000003, “maxLevel”: 12, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Axr4ox5_b7edmLsoHxBX3vmgijAIibuF6RImTbqLlXE.png” }, “rarity”: “rare” }, { “name”: “P.E.K.K.A”, “id”: 26000004, “maxLevel”: 9, “elixirCost”: 7, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/MlArURKhn_zWAZY-Xj1qIRKLVKquarG25BXDjUQajNs.png” }, “rarity”: “epic” }, { “name”: “Minions”, “id”: 26000005, “maxLevel”: 14, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/yHGpoEnmUWPGV_hBbhn-Kk-Bs838OjGzWzJJlQpQKQA.png” }, “rarity”: “common” }, { “name”: “Balloon”, “id”: 26000006, “maxLevel”: 9, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/qBipxLo-3hhCnPrApp2Nn3b2NgrSrvwzWytvREev0CY.png” }, “rarity”: “epic” }, { “name”: “Witch”, “id”: 26000007, “maxLevel”: 9, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/cfwk1vzehVyHC-uloEIH6NOI0hOdofCutR5PyhIgO6w.png” }, “rarity”: “epic” }, { “name”: “Barbarians”, “id”: 26000008, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/TvJsuu2S4yhyk1jVYUAQwdKOnW4U77KuWWOTPOWnwfI.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/TvJsuu2S4yhyk1jVYUAQwdKOnW4U77KuWWOTPOWnwfI.png” }, “rarity”: “common” }, { “name”: “Golem”, “id”: 26000009, “maxLevel”: 9, “elixirCost”: 8, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/npdmCnET7jmVjJvjJQkFnNSNnDxYHDBigbvIAloFMds.png” }, “rarity”: “epic” }, { “name”: “Skeletons”, “id”: 26000010, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 1, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/oO7iKMU5m0cdxhYPZA3nWQiAUh2yoGgdThLWB1rVSec.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/oO7iKMU5m0cdxhYPZA3nWQiAUh2yoGgdThLWB1rVSec.png” }, “rarity”: “common” }, { “name”: “Valkyrie”, “id”: 26000011, “maxLevel”: 12, “maxEvolutionLevel”: 1, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/0lIoYf3Y_plFTzo95zZL93JVxpfb3MMgFDDhgSDGU9A.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/0lIoYf3Y_plFTzo95zZL93JVxpfb3MMgFDDhgSDGU9A.png” }, “rarity”: “rare” }, { “name”: “Skeleton Army”, “id”: 26000012, “maxLevel”: 9, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/fAOToOi1pRy7svN2xQS6mDkhQw2pj9m_17FauaNqyl4.png” }, “rarity”: “epic” }, { “name”: “Bomber”, “id”: 26000013, “maxLevel”: 14, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/12n1CesxKIcqVYntjxcF36EFA-ONw7Z-DoL0_rQrbdo.png” }, “rarity”: “common” }, { “name”: “Musketeer”, “id”: 26000014, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Tex1C48UTq9FKtAX-3tzG0FJmc9jzncUZG3bb5Vf-Ds.png” }, “rarity”: “rare” }, { “name”: “Baby Dragon”, “id”: 26000015, “maxLevel”: 9, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/cjC9n4AvEZJ3urkVh-rwBkJ-aRSsydIMqSAV48hAih0.png” }, “rarity”: “epic” }, { “name”: “Prince”, “id”: 26000016, “maxLevel”: 9, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/3JntJV62aY0G1Qh6LIs-ek-0ayeYFY3VItpG7cb9I60.png” }, “rarity”: “epic” }, { “name”: “Wizard”, “id”: 26000017, “maxLevel”: 12, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Mej7vnv4H_3p_8qPs_N6_GKahy6HDr7pU7i9eTHS84U.png” }, “rarity”: “rare” }, { “name”: “Mini P.E.K.K.A”, “id”: 26000018, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Fmltc4j3Ve9vO_xhHHPEO3PRP3SmU2oKp2zkZQHRZT4.png” }, “rarity”: “rare” }, { “name”: “Spear Goblins”, “id”: 26000019, “maxLevel”: 14, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/FSDFotjaXidI4ku_WFpVCTWS1hKGnFh1sxX0lxM43_E.png” }, “rarity”: “common” }, { “name”: “Giant Skeleton”, “id”: 26000020, “maxLevel”: 9, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/0p0gd0XaVRu1Hb1iSG1hTYbz2AN6aEiZnhaAib5O8Z8.png” }, “rarity”: “epic” }, { “name”: “Nigger”, “id”: 26000021, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Ubu0oUl8tZkusnkZf8Xv9Vno5IO29Y-jbZ4fhoNJ5oc.png” }, “rarity”: “rare” }, { “name”: “Hog Rider”, “id”: 26000021, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Ubu0oUl8tZkusnkZf8Xv9Vno5IO29Y-jbZ4fhoNJ5oc.png” }, “rarity”: “rare” }, { “name”: “Minion Horde”, “id”: 26000022, “maxLevel”: 14, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Wyjq5l0IXHTkX9Rmpap6HaH08MvjbxFp1xBO9a47YSI.png” }, “rarity”: “common” }, { “name”: “Ice Wizard”, “id”: 26000023, “maxLevel”: 6, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/W3dkw0HTw9n1jB-zbknY2w3wHuyuLxSRIAV5fUT1SEY.png” }, “rarity”: “legendary” }, { “name”: “Royal Giant”, “id”: 26000024, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/mnlRaNtmfpQx2e6mp70sLd0ND-pKPF70Cf87_agEKg4.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/mnlRaNtmfpQx2e6mp70sLd0ND-pKPF70Cf87_agEKg4.png” }, “rarity”: “common” }, { “name”: “Guards”, “id”: 26000025, “maxLevel”: 9, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/1ArKfLJxYo6_NU_S9cAeIrfbXqWH0oULVJXedxBXQlU.png” }, “rarity”: “epic” }, { “name”: “Princess”, “id”: 26000026, “maxLevel”: 6, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/bAwMcqp9EKVIKH3ZLm_m0MqZFSG72zG-vKxpx8aKoVs.png” }, “rarity”: “legendary” }, { “name”: “Dark Prince”, “id”: 26000027, “maxLevel”: 9, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/M7fXlrKXHu2IvpSGpk36kXVstslbR08Bbxcy0jQcln8.png” }, “rarity”: “epic” }, { “name”: “Three Musketeers”, “id”: 26000028, “maxLevel”: 12, “elixirCost”: 9, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/_J2GhbkX3vswaFk1wG-dopwiHyNc_YiPhwroiKF3Mek.png” }, “rarity”: “rare” }, { “name”: “Lava Hound”, “id”: 26000029, “maxLevel”: 6, “elixirCost”: 7, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/unicRQ975sBY2oLtfgZbAI56ZvaWz7azj-vXTLxc0r8.png” }, “rarity”: “legendary” }, { “name”: “Ice Spirit”, “id”: 26000030, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 1, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/lv1budiafU9XmSdrDkk0NYyqASAFYyZ06CPysXKZXlA.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/lv1budiafU9XmSdrDkk0NYyqASAFYyZ06CPysXKZXlA.png” }, “rarity”: “common” }, { “name”: “Fire Spirit”, “id”: 26000031, “maxLevel”: 14, “elixirCost”: 1, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/16-BqusVvynIgYI8_Jci3LDC-r8AI_xaIYLgXqtlmS8.png” }, “rarity”: “common” }, { “name”: “Miner”, “id”: 26000032, “maxLevel”: 6, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Y4yWvdwBCg2FpAZgs8T09Gy34WOwpLZW-ttL52Ae8NE.png” }, “rarity”: “legendary” }, { “name”: “Sparky”, “id”: 26000033, “maxLevel”: 6, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/2GKMkBrArZXgQxf2ygFjDs4VvGYPbx8F6Lj_68iVhIM.png” }, “rarity”: “legendary” }, { “name”: “Bowler”, “id”: 26000034, “maxLevel”: 9, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/SU4qFXmbQXWjvASxVI6z9IJuTYolx4A0MKK90sTIE88.png” }, “rarity”: “epic” }, { “name”: “Lumberjack”, “id”: 26000035, “maxLevel”: 6, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/E6RWrnCuk13xMX5OE1EQtLEKTZQV6B78d00y8PlXt6Q.png” }, “rarity”: “legendary” }, { “name”: “Battle Ram”, “id”: 26000036, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/dyc50V2cplKi4H7pq1B3I36pl_sEH5DQrNHboS_dbbM.png” }, “rarity”: “rare” }, { “name”: “Inferno Dragon”, “id”: 26000037, “maxLevel”: 6, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/y5HDbKtTbWG6En6TGWU0xoVIGs1-iQpIP4HC-VM7u8A.png” }, “rarity”: “legendary” }, { “name”: “Ice Golem”, “id”: 26000038, “maxLevel”: 12, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/r05cmpwV1o7i7FHodtZwW3fmjbXCW34IJCsDEV5cZC4.png” }, “rarity”: “rare” }, { “name”: “Mega Minion”, “id”: 26000039, “maxLevel”: 12, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/-T_e4YLbuhPBKbYnBwQfXgynNpp5eOIN_0RracYwL9c.png” }, “rarity”: “rare” }, { “name”: “Dart Goblin”, “id”: 26000040, “maxLevel”: 12, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/BmpK3bqEAviflqHCdxxnfm-_l3pRPJw3qxHkwS55nCY.png” }, “rarity”: “rare” }, { “name”: “Goblin Gang”, “id”: 26000041, “maxLevel”: 14, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/NHflxzVAQT4oAz7eDfdueqpictb5vrWezn1nuqFhE4w.png” }, “rarity”: “common” }, { “name”: “Electro Wizard”, “id”: 26000042, “maxLevel”: 6, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/RsFaHgB3w6vXsTjXdPr3x8l_GbV9TbOUCvIx07prbrQ.png” }, “rarity”: “legendary” }, { “name”: “Elite Barbarians”, “id”: 26000043, “maxLevel”: 14, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/C88C5JH_F3lLZj6K-tLcMo5DPjrFmvzIb1R2M6xCfTE.png” }, “rarity”: “common” }, { “name”: “Hunter”, “id”: 26000044, “maxLevel”: 9, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/VNabB1WKnYtYRSG7X_FZfnZjQDHTBs9A96OGMFmecrA.png” }, “rarity”: “epic” }, { “name”: “Executioner”, “id”: 26000045, “maxLevel”: 9, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/9XL5BP2mqzV8kza6KF8rOxrpCZTyuGLp2l413DTjEoM.png” }, “rarity”: “epic” }, { “name”: “Bandit”, “id”: 26000046, “maxLevel”: 6, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/QWDdXMKJNpv0go-HYaWQWP6p8uIOHjqn-zX7G0p3DyM.png” }, “rarity”: “legendary” }, { “name”: “Royal Recruits”, “id”: 26000047, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 7, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/jcNyYGUiXXNz3kuz8NBkHNKNREQKraXlb_Ts7rhCIdM.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/jcNyYGUiXXNz3kuz8NBkHNKNREQKraXlb_Ts7rhCIdM.png” }, “rarity”: “common” }, { “name”: “Night Witch”, “id”: 26000048, “maxLevel”: 6, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/NpCrXDEDBBJgNv9QrBAcJmmMFbS7pe3KCY8xJ5VB18A.png” }, “rarity”: “legendary” }, { “name”: “Bats”, “id”: 26000049, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/EnIcvO21hxiNpoI-zO6MDjLmzwPbq8Z4JPo2OKoVUjU.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/EnIcvO21hxiNpoI-zO6MDjLmzwPbq8Z4JPo2OKoVUjU.png” }, “rarity”: “common” }, { “name”: “Royal Ghost”, “id”: 26000050, “maxLevel”: 6, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/3En2cz0ISQAaMTHY3hj3rTveFN2kJYq-H4VxvdJNvCM.png” }, “rarity”: “legendary” }, { “name”: “Ram Rider”, “id”: 26000051, “maxLevel”: 6, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/QaJyerT7f7oMyZ3Fv1glKymtLSvx7YUXisAulxl7zRI.png” }, “rarity”: “legendary” }, { “name”: “Zappies”, “id”: 26000052, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/QZfHRpLRmutZbCr5fpLnTpIp89vLI6NrAwzGZ8tHEc4.png” }, “rarity”: “rare” }, { “name”: “Rascals”, “id”: 26000053, “maxLevel”: 14, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/KV48DfwVHKx9XCjzBdk3daT_Eb52Me4VgjVO7WctRc4.png” }, “rarity”: “common” }, { “name”: “Cannon Cart”, “id”: 26000054, “maxLevel”: 9, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/aqwxRz8HXzqlMCO4WMXNA1txynjXTsLinknqsgZLbok.png” }, “rarity”: “epic” }, { “name”: “Mega Knight”, “id”: 26000055, “maxLevel”: 6, “elixirCost”: 7, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/O2NycChSNhn_UK9nqBXUhhC_lILkiANzPuJjtjoz0CE.png” }, “rarity”: “legendary” }, { “name”: “Skeleton Barrel”, “id”: 26000056, “maxLevel”: 14, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/vCB4DWCcrGbTkarjcOiVz4aNDx6GWLm0yUepg9E1MGo.png” }, “rarity”: “common” }, { “name”: “Flying Machine”, “id”: 26000057, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/hzKNE3QwFcrSrDDRuVW3QY_OnrDPijSiIp-PsWgFevE.png” }, “rarity”: “rare” }, { “name”: “Wall Breakers”, “id”: 26000058, “maxLevel”: 9, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/_xPphEfC8eEwFNrfU3cMQG9-f5JaLQ31ARCA7l3XtW4.png” }, “rarity”: “epic” }, { “name”: “Royal Hogs”, “id”: 26000059, “maxLevel”: 12, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/ASSQJG_MoVq9e81HZzo4bynMnyLNpNJMfSLb3hqydOw.png” }, “rarity”: “rare” }, { “name”: “Goblin Giant”, “id”: 26000060, “maxLevel”: 9, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/SoW16cY3jXBwaTDvb39DkqiVsoFVaDWbzf5QBYphJrY.png” }, “rarity”: “epic” }, { “name”: “Fisherman”, “id”: 26000061, “maxLevel”: 6, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/U2KZ3g0wyufcuA5P2Xrn3Z3lr1WiJmc5S0IWOZHgizQ.png” }, “rarity”: “legendary” }, { “name”: “Magic Archer”, “id”: 26000062, “maxLevel”: 6, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Avli3W7BxU9HQ2SoLiXnBgGx25FoNXUSFm7OcAk68ek.png” }, “rarity”: “legendary” }, { “name”: “Electro Dragon”, “id”: 26000063, “maxLevel”: 9, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/tN9h6lnMNPCNsx0LMFmvpHgznbDZ1fBRkx-C7UfNmfY.png” }, “rarity”: “epic” }, { “name”: “Firecracker”, “id”: 26000064, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/c1rL3LO1U2D9-TkeFfAC18gP3AO8ztSwrcHMZplwL2Q.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/c1rL3LO1U2D9-TkeFfAC18gP3AO8ztSwrcHMZplwL2Q.png” }, “rarity”: “common” }, { “name”: “Mighty Miner”, “id”: 26000065, “maxLevel”: 4, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Cd9R56yraxTvJiD8xJ2qT2OdsHyh94FqOAarXpbyelo.png” }, “rarity”: “champion” }, { “name”: “Elixir Golem”, “id”: 26000067, “maxLevel”: 12, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/puhMsZjCIqy21HW3hYxjrk_xt8NIPyFqjRy-BeLKZwo.png” }, “rarity”: “rare” }, { “name”: “Battle Healer”, “id”: 26000068, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/KdwXcoigS2Kg-cgA7BJJIANbUJG6SNgjetRQ-MegZ08.png” }, “rarity”: “rare” }, { “name”: “Skeleton King”, “id”: 26000069, “maxLevel”: 4, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/dCd69_wN9f8DxwuqOGtR4QgWhHIPIaTNxZ1e23RzAAc.png” }, “rarity”: “champion” }, { “name”: “Archer Queen”, “id”: 26000072, “maxLevel”: 4, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/p7OQmOAFTery7zCzlpDdm-LOD1kINTm42AwIHchZfWk.png” }, “rarity”: “champion” }, { “name”: “Golden Knight”, “id”: 26000074, “maxLevel”: 4, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/WJd207D0O1sN-l1FTb8P9KhYL2oF5jY26vRUfTUW3FQ.png” }, “rarity”: “champion” }, { “name”: “Monk”, “id”: 26000077, “maxLevel”: 4, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/2onG4t4-CxqwFVZAn6zpWxFz3_mG2ksSj4Q7zldo1SM.png” }, “rarity”: “champion” }, { “name”: “Skeleton Dragons”, “id”: 26000080, “maxLevel”: 14, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/qPOtg9uONh47_NLxGhhFc_ww9PlZ6z3Ry507q1NZUXs.png” }, “rarity”: “common” }, { “name”: “Mother Witch”, “id”: 26000083, “maxLevel”: 6, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/fO-Xah8XZkYKaSK9SCp3wnzwxtvIhun9NVY-zzte1Ng.png” }, “rarity”: “legendary” }, { “name”: “Electro Spirit”, “id”: 26000084, “maxLevel”: 14, “elixirCost”: 1, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/WKd4-IAFsgPpMo7dDi9sujmYjRhOMEWiE07OUJpvD9g.png” }, “rarity”: “common” }, { “name”: “Electro Giant”, “id”: 26000085, “maxLevel”: 9, “elixirCost”: 7, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/_uChZkNHAMq6tPb3v6A49xinOe3CnhjstOhG6OZbPYc.png” }, “rarity”: “epic” }, { “name”: “Phoenix”, “id”: 26000087, “maxLevel”: 6, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/i0RoY1fs6ay7VAxyFEfZGIPnD002nAKcne9FtJsWBHM.png” }, “rarity”: “legendary” }, { “name”: “Little Prince”, “id”: 26000093, “maxLevel”: 4, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/dY-gSseki6KBpkIG17safHH5YlB8SErFZO9OXbJxf9w.png” }, “rarity”: “champion” }, { “name”: “Cannon”, “id”: 27000000, “maxLevel”: 14, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/nZK1y-beLxO5vnlyUhK6-2zH2NzXJwqykcosqQ1cmZ8.png” }, “rarity”: “common” }, { “name”: “Goblin Hut”, “id”: 27000001, “maxLevel”: 12, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/l8ZdzzNLcwB4u7ihGgxNFQOjCT_njFuAhZr7D6PRF7E.png” }, “rarity”: “rare” }, { “name”: “Mortar”, “id”: 27000002, “maxLevel”: 14, “maxEvolutionLevel”: 1, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/lPOSw6H7YOHq2miSCrf7ZDL3ANjhJdPPDYOTujdNrVE.png”, “evolutionMedium”: “https://api-assets.clashroyale.com/cardevolutions/300/lPOSw6H7YOHq2miSCrf7ZDL3ANjhJdPPDYOTujdNrVE.png” }, “rarity”: “common” }, { “name”: “Inferno Tower”, “id”: 27000003, “maxLevel”: 12, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/GSHY_wrooMMLET6bG_WJB8redtwx66c4i80ipi4gYOM.png” }, “rarity”: “rare” }, { “name”: “Bomb Tower”, “id”: 27000004, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/rirYRyHPc97emRjoH-c1O8uZCBzPVnToaGuNGusF3TQ.png” }, “rarity”: “rare” }, { “name”: “Barbarian Hut”, “id”: 27000005, “maxLevel”: 12, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/ho0nOG2y3Ch86elHHcocQs8Fv_QNe0cFJ2CijsxABZA.png” }, “rarity”: “rare” }, { “name”: “Tesla”, “id”: 27000006, “maxLevel”: 14, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/OiwnGrxFMNiHetYEerE-UZt0L_uYNzFY7qV_CA_OxR4.png” }, “rarity”: “common” }, { “name”: “Elixir Collector”, “id”: 27000007, “maxLevel”: 12, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/BGLo3Grsp81c72EpxLLk-Sofk3VY56zahnUNOv3JcT0.png” }, “rarity”: “rare” }, { “name”: “X-Bow”, “id”: 27000008, “maxLevel”: 9, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/zVQ9Hme1hlj9Dc6e1ORl9xWwglcSrP7ejow5mAhLUJc.png” }, “rarity”: “epic” }, { “name”: “Tombstone”, “id”: 27000009, “maxLevel”: 12, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/LjSfSbwQfkZuRJY4pVxKspZ-a0iM5KAhU8w-a_N5Z7Y.png” }, “rarity”: “rare” }, { “name”: “Furnace”, “id”: 27000010, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/iqbDiG7yYRIzvCPXdt9zPb3IvMt7F7Gi4wIPnh2x4aI.png” }, “rarity”: “rare” }, { “name”: “Goblin Cage”, “id”: 27000012, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/vD24bBgK4rSq7wx5QEbuqChtPMRFviL_ep76GwQw1yA.png” }, “rarity”: “rare” }, { “name”: “Goblin Drill”, “id”: 27000013, “maxLevel”: 9, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/eN2TKUYbih-26yBi0xy5LVFOA0zDftgDqxxnVfdIg1o.png” }, “rarity”: “epic” }, { “name”: “Fireball”, “id”: 28000000, “maxLevel”: 12, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/lZD9MILQv7O-P3XBr_xOLS5idwuz3_7Ws9G60U36yhc.png” }, “rarity”: “rare” }, { “name”: “Arrows”, “id”: 28000001, “maxLevel”: 14, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Flsoci-Y6y8ZFVi5uRFTmgkPnCmMyMVrU7YmmuPvSBo.png” }, “rarity”: “common” }, { “name”: “Rage”, “id”: 28000002, “maxLevel”: 9, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/bGP21OOmcpHMJ5ZA79bHVV2D-NzPtDkvBskCNJb7pg0.png” }, “rarity”: “epic” }, { “name”: “Rocket”, “id”: 28000003, “maxLevel”: 12, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Ie07nQNK9CjhKOa4-arFAewi4EroqaA-86Xo7r5tx94.png” }, “rarity”: “rare” }, { “name”: “Goblin Barrel”, “id”: 28000004, “maxLevel”: 9, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/CoZdp5PpsTH858l212lAMeJxVJ0zxv9V-f5xC8Bvj5g.png” }, “rarity”: “epic” }, { “name”: “Freeze”, “id”: 28000005, “maxLevel”: 9, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/I1M20_Zs_p_BS1NaNIVQjuMJkYI_1-ePtwYZahn0JXQ.png” }, “rarity”: “epic” }, { “name”: “Mirror”, “id”: 28000006, “maxLevel”: 9, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/wC6Cm9rKLEOk72zTsukVwxewKIoO4ZcMJun54zCPWvA.png” }, “rarity”: “epic” }, { “name”: “Lightning”, “id”: 28000007, “maxLevel”: 9, “elixirCost”: 6, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/fpnESbYqe5GyZmaVVYe-SEu7tE0Kxh_HZyVigzvLjks.png” }, “rarity”: “epic” }, { “name”: “Zap”, “id”: 28000008, “maxLevel”: 14, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/7dxh2-yCBy1x44GrBaL29vjqnEEeJXHEAlsi5g6D1eY.png” }, “rarity”: “common” }, { “name”: “Poison”, “id”: 28000009, “maxLevel”: 9, “elixirCost”: 4, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/98HDkG2189yOULcVG9jz2QbJKtfuhH21DIrIjkOjxI8.png” }, “rarity”: “epic” }, { “name”: “Graveyard”, “id”: 28000010, “maxLevel”: 6, “elixirCost”: 5, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Icp8BIyyfBTj1ncCJS7mb82SY7TPV-MAE-J2L2R48DI.png” }, “rarity”: “legendary” }, { “name”: “The Log”, “id”: 28000011, “maxLevel”: 6, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/_iDwuDLexHPFZ_x4_a0eP-rxCS6vwWgTs6DLauwwoaY.png” }, “rarity”: “legendary” }, { “name”: “Tornado”, “id”: 28000012, “maxLevel”: 9, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/QJB-QK1QJHdw4hjpAwVSyZBozc2ZWAR9pQ-SMUyKaT0.png” }, “rarity”: “epic” }, { “name”: “Clone”, “id”: 28000013, “maxLevel”: 9, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/mHVCet-1TkwWq-pxVIU2ZWY9_2z7Z7wtP25ArEUsP_g.png” }, “rarity”: “epic” }, { “name”: “Earthquake”, “id”: 28000014, “maxLevel”: 12, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/XeQXcrUu59C52DslyZVwCnbi4yamID-WxfVZLShgZmE.png” }, “rarity”: “rare” }, { “name”: “Barbarian Barrel”, “id”: 28000015, “maxLevel”: 9, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Gb0G1yNy0i5cIGUHin8uoFWxqntNtRPhY_jeMXg7HnA.png” }, “rarity”: “epic” }, { “name”: “Heal Spirit”, “id”: 28000016, “maxLevel”: 12, “elixirCost”: 1, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/GITl06sa2nGRLPvboyXbGEv5E3I-wAwn1Eqa5esggbc.png” }, “rarity”: “rare” }, { “name”: “Giant Snowball”, “id”: 28000017, “maxLevel”: 14, “elixirCost”: 2, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/7MaJLa6hK9WN2_VIshuh5DIDfGwm0wEv98gXtAxLDPs.png” }, “rarity”: “common” }, { “name”: “Royal Delivery”, “id”: 28000018, “maxLevel”: 14, “elixirCost”: 3, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/LPg7AGjGI3_xmi7gLLgGC50yKM1jJ2teWkZfoHJcIZo.png” }, “rarity”: “common” } ], “supportItems”: [ { “name”: “Tower Princess”, “id”: 159000000, “maxLevel”: 14, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/Nzo5Gjbh7NG6O3Hyu7ev54Pu5zK7vDMR2fbpGdVsS64.png” }, “rarity”: “common” }, { “name”: “Cannoneer”, “id”: 159000001, “maxLevel”: 9, “iconUrls”: { “medium”: “https://api-assets.clashroyale.com/cards/300/cUfU4UowRdbIiRvxv0ns4ezQUNndJTy7D2q4I_K_fzg.png” }, “rarity”: “epic” } ] }; .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/23/Clash-Data.html",
            "relUrl": "/2024/01/23/Clash-Data.html",
            "date": " • Jan 23, 2024"
        }
        
    
  
    
        ,"post18": {
            "title": "Search",
            "content": "Clash Royale Card Search . Clash Royale Card Search . Search Show All Cards All Cards: . Imaginary Deck . .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/22/Clash-Royal.html",
            "relUrl": "/2024/01/22/Clash-Royal.html",
            "date": " • Jan 22, 2024"
        }
        
    
  
    
        ,"post19": {
            "title": "Project Plans",
            "content": "Clash Royal Website . Ashwin - Deck Builder . The game clash royal is a mobile where two people play against eachother with decks of 8 cards. The cards each have different satistics and abilitys. I aim to build a user friendly interface that lets you drag cards from a collection of all the 118 cards into 8 slots for your deck. Once the deck is build it will display the average elixer cost of the cost, and some other statistics if possible. . This is the logo I will be using for the elixer . This is an example of what my UI will look like . Message board- Gurshawn . In our clash royal themed project, my feature will be to create a place where all publicly shared desks can be seen. Upon clicking on one of them you will be able to read and review comments about this specific deck. Additionally there will be a rating system where each user leaves a /5 rating and this data can be averaged for sorting. A function will go through each comment to find keywords or characters that indicate a rating. In the “publicly shared” tab ther will be the option to view by newest uploaded, most popular, and highst rated. . Database Setup: . Set up a database to store comments related to each Clash Royale deck. Ensure you have a table that links comments to specific decks, and includes fields for comment content, user ID, timestamp, etc. Backend/API Implementation: . Develop a backend/API to handle requests related to comments. Create endpoints for adding, retrieving, and updating comments. Implement authentication mechanisms to ensure that only authorized users can leave comments. User Interface Integration: . Integrate the comment system into the user interface of your Clash Royale project. This may involve adding a comment section to each deck’s detail page. Comment Form: . Create a form on the UI that allows users to input their comments. Include fields for the comment content and any other relevant details. Comment Submission: . Implement a mechanism to submit comments to the backend when users fill out the comment form. Ensure that the necessary data (deck ID, user ID, comment content) is sent to the backend. Backend Processing: . Develop server-side logic to process incoming comments. This includes validating input, associating comments with the correct deck, and storing them in the database. Retrieving Comments: . Implement functionality to retrieve and display comments associated with a specific Clash Royale deck. This may involve making API requests to fetch comments when a user views a particular deck. Displaying Comments: . Design a layout to display comments on the UI. Include user information, timestamp, and the comment content. Ensure that the comments are presented in a user-friendly and readable format. Updating and Deleting Comments: . Implement features to allow users to edit or delete their own comments. Ensure that only authorized users can perform these actions. Image: https://docs.google.com/drawings/d/10fjbCSRd3wqy5j-LwtVze9CZh1MSEpGAUOCRf8AUPFw/edit?usp=sharing . . Lincoln . Coding Clash Royale cards onto a website aligns with the College Board’s Computer Science Principles requirements by demonstrating understanding of programming concepts, algorithms, and data representation. It showcases computational thinking, problem-solving skills, and the ability to design interactive user interfaces, meeting the criteria for the creative development of a project in the context of CSP coursework. I also plan to implement a feature where clicking on a Clash Royale card reveals its information involves using event-driven programming, a key CSP concept. I will do this by employing HTML, SASS, and JavaScript. JavaScript handles the click event, triggering the display of card details. This not only demonstrates proficiency in web development but also showcases knowledge of variables, functions, and conditional statements—integral components of CSP. Additionally, I can explore data structures to efficiently store and retrieve card information. . . Dante and Vance . Me and Vance will work on the overall appearance and styling of the website aswell as the backend. Vance is specific will work on the search algorithm and the dragibility of the cards as well as their individual code and information. Also, me and vance together will work on the user interface with the commenting and sharing the decks you create. I will work on databasing and storing all of the card data in the back end since it is all stored temporarily in the front end. Also, I will partially work on the login and databasing all of the unique user info like comments and decks. Vance’s individual feature the dragibility of the cards working off of Ashwins feature. My feature can be the log in system. . see demo in tangibles . plans . Work on intergrating postman into code Work on log in creation Create working backend store all clash royal card data into the backend .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/19/Project-Plans_IPYNB_2_.html",
            "relUrl": "/2024/01/19/Project-Plans_IPYNB_2_.html",
            "date": " • Jan 19, 2024"
        }
        
    
  
    
        ,"post20": {
            "title": "Cptfrontend",
            "content": "&lt;!DOCTYPE html&gt; . Meme Database . Meme Database . . Home | Browse | Make a Meme Welcome to the Meme Database! . Explore a collection of hilarious memes in a stylish and aesthetic environment. . &copy; 2024 Meme Database. All rights reserved. . .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/16/CPTFrontend.html",
            "relUrl": "/2024/01/16/CPTFrontend.html",
            "date": " • Jan 16, 2024"
        }
        
    
  
    
        ,"post21": {
            "title": "JWT Login (python/flask)",
            "content": "User ID: . Password: . Login .",
            "url": "http://localhost:4100/GLADV2Frontend/2024/01/08/python-jwt-login.html",
            "relUrl": "/2024/01/08/python-jwt-login.html",
            "date": " • Jan 8, 2024"
        }
        
    
  
    
        ,"post22": {
            "title": "Database Get",
            "content": "SQL Database Fetch . Name ID Age .",
            "url": "http://localhost:4100/GLADV2Frontend/data/database",
            "relUrl": "/data/database",
            "date": " • Jan 8, 2024"
        }
        
    
  

  
  

  

  

  

  
      ,"page4": {
          "title": "Project TimeBox",
          "content": "",
          "url": "http://localhost:4100/GLADV2Frontend/AD_TimeBox.html",
          "relUrl": "/AD_TimeBox.html",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "About",
          "content": "Clash Royale project created by AP CSP students: . Ashwin, Dante, Lincoln, Gurshawn, Vance | .",
          "url": "http://localhost:4100/GLADV2Frontend/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page7": {
          "title": "Create User",
          "content": "Create New User . Name: . . User ID: . . Password: . . Date of Birth: . . Submit .",
          "url": "http://localhost:4100/GLADV2Frontend/createUser",
          "relUrl": "/createUser",
          "date": ""
      }
      
  

  
      ,"page8": {
          "title": "Delete",
          "content": "Delete User Form . User ID: . . Delete .",
          "url": "http://localhost:4100/GLADV2Frontend/deleteUser",
          "relUrl": "/deleteUser",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": "Clash Royale Dashboard . Upcoming Events . . Current Best Decks . . Leaderboard - Top Players . &lt;/html&gt; .",
          "url": "http://localhost:4100/GLADV2Frontend/clash.html",
          "relUrl": "/clash.html",
          "date": ""
      }
      
  

  

  

  
      ,"page12": {
          "title": "",
          "content": "&lt;!DOCTYPE html&gt; . NBA Player Search . Search NBA Player . Search Profile . Statistics . .",
          "url": "http://localhost:4100/GLADV2Frontend/nba.html",
          "relUrl": "/nba.html",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "",
          "content": "NBA Player Stats . Search for an NBA Player . Search Player Stats . Enter a player name to see stats. My Team . . Reset Team .",
          "url": "http://localhost:4100/GLADV2Frontend/nba2.html",
          "relUrl": "/nba2.html",
          "date": ""
      }
      
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "&lt;!DOCTYPE html&gt; . Search NBA Player . Search NBA Player . Player Name: Search .",
          "url": "http://localhost:4100/GLADV2Frontend/search.html",
          "relUrl": "/search.html",
          "date": ""
      }
      
  

  
  

  
  

  
  

}